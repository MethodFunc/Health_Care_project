<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
<link rel="stylesheet" href="stylesheets/style.css">


<div class="cover-container d-flex w-100 h-100 p-3 mx-auto flex-column">
    <header class="masthead mb-auto">
        <div class="inner">
            <h3 class="masthead-brand">Health Care</h3>
            <nav class="nav nav-masthead justify-content-center">
                <a class="nav-link" href="/">Home</a>
                <a class="nav-link active" href="/squat">Squat</a>
                <a class="nav-link" href="/contact">Contact</a>
            </nav>
        </div>
    </header>
    <main role="main" class="inner cover">
        <h1 class="cover-heading">Squat Training</h1>
        <br>
        <table class="table table-active table-borderless">
            <thead>
            <tr>
                <th colspan="2"><p class="lead"> <button class="btn btn-primary"type="button" onclick="init()">Start</button> </p> </th>
                <!--                <th><p class="lead"> ‚Üê Click to start </p></th>-->
            </tr>
            </thead>
            <tbody>
            <tr height="200">
                <td >
                    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
                    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8.3/dist/teachablemachine-pose.min.js"></script>
                    <div><canvas id="canvas"></canvas></div>
                    <div id="label-container"></div>
                    <script type="text/javascript">
                        // More API functions here:
                        // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose

                        // the link to your model provided by Teachable Machine export panel
                        const URL = 'my_model/'
                        const SOUND = 'sound/'
                        let model, webcam, ctx, labelContainer, maxPredictions;

                        async function init() {
                            const modelURL = URL + 'model.json'
                            const metadataURL = URL + 'metadata.json'

                            // load the model and metadata
                            // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                            // Note: the pose library adds a tmPose object to your window (window.tmPose)
                            model = await tmPose.load(modelURL, metadataURL);
                            maxPredictions = model.getTotalClasses();

                            // Convenience function to setup a webcam
                            const size = 300;
                            const flip = true; // whether to flip the webcam
                            webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
                            await webcam.setup(); // request access to the webcam
                            await webcam.play();
                            window.requestAnimationFrame(loop);

                            // append/get elements to the DOM
                            const canvas = document.getElementById("canvas");
                            canvas.width = size; canvas.height = size;
                            ctx = canvas.getContext("2d");
                            labelContainer = document.getElementById("label-container");
                            for (let i = 0; i < maxPredictions; i++) { // and class labels
                                labelContainer.appendChild(document.createElement("div"));
                            }
                        }

                        async function loop(timestamp) {
                            webcam.update(); // update the webcam frame
                            await predict();
                            window.requestAnimationFrame(loop);
                        }
                        var progress = 327
                        var status = "stand"
                        var count = 0
                        async function predict() {

                            // Prediction #1: run input through posenet
                            // estimatePose can take in an image, video or canvas html element
                            const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
                            // Prediction 2: run input through teachable machine classification model
                            const prediction = await model.predict(posenetOutput);
                            if (prediction[0].probability.toFixed(2) > 0.90) {
                                if (status == "squat") {
                                    count++
                                    var audio = new Audio(SOUND + count % 10 + '.mp3');
                                    audio.play();
                                    progress = progress-32.7
                                    if(progress <= 0) {
                                        progress = 327-32.7
                                    }
                                    $('.progress').css('stroke-dashoffset', progress);
                                    $('#counter').html(count);
                                }
                                status = "stand"
                            } else if (prediction[1].probability.toFixed(2) == 1.00) {
                                status = "squat"
                            } else if (prediction[2].probability.toFixed(2) == 1.00) {
                                if (status == "squat" || status == "stand") {
                                    var audio = new Audio(SOUND + 'bent.mp3');
                                    audio.play();
                                }
                                status = "bent"
                            }
                            // for (let i = 0; i < maxPredictions; i++) {
                            //     const classPrediction =
                            //         prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                            //     labelContainer.childNodes[i].innerHTML = classPrediction;
                            // }

                            // finally draw the poses
                            drawPose(pose);
                        }

                        function drawPose(pose) {
                            if (webcam.canvas) {
                                ctx.drawImage(webcam.canvas, 0, 0);
                                // draw the keypoints and skeleton
                                if (pose) {
                                    const minPartConfidence = 0.5;
                                    tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                                    tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                                }
                            }
                        }
                    </script></td>
                <td>
                    <!--                    <div class="col-lg-3 stats">-->
                    <h5 style="color:white;">Squat Count</h5>
                    <i class="fa fa-check" aria-hidden="true" style="color:white;"></i>
                    <div id='counter' style="color:white;">0</div>
</div>
</td>
</tr>
</tbody></table>
</main>

<% include ../part/footer.ejs%>
</div>