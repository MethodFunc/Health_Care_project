<main role="main" class="inner cover">
    <h1 class="cover-heading">Squat Training</h1>
    <br>
    <table class="table table-active table-borderless">
        <thead>
        <tr>
            <th colspan="2"><p class="lead"> <button class="btn btn-primary"type="button" onclick="setTimeout(init(), 10000) ">Start</button> </p> </th>
            <!--                <th><p class="lead"> ← Click to start </p></th>-->
        </tr>
        </thead>
        <tbody>
        <tr height="200">
            <td >
                <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8.3/dist/teachablemachine-pose.min.js"></script>
                <div><canvas id="canvas"></canvas></div>
                <div id="label-container"></div>
                <script type="text/javascript">
                    // More API functions here:
                    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose

                    // the link to your model provided by Teachable Machine export panel
                    const URL = 'my_model/squat'
                    const SOUND = 'sound/'
                    let model, webcam, ctx, labelContainer, maxPredictions;

                    async function init() {
                        const modelURL = URL + 'model.json'
                        const metadataURL = URL + 'metadata.json'

                        // load the model and metadata
                        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                        // Note: the pose library adds a tmPose object to your window (window.tmPose)
                        model = await tmPose.load(modelURL, metadataURL);
                        maxPredictions = model.getTotalClasses();

                        // Convenience function to setup a webcam
                        const size = 300;
                        const flip = false; // whether to flip the webcam
                        webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
                        await webcam.setup(); // request access to the webcam
                        await webcam.play();
                        window.requestAnimationFrame(loop);

                        // append/get elements to the DOM
                        const canvas = document.getElementById("canvas");
                        canvas.width = size; canvas.height = size;
                        ctx = canvas.getContext("2d");
                        labelContainer = document.getElementById("label-container");
                        for (let i = 0; i < maxPredictions; i++) { // and class labels
                            labelContainer.appendChild(document.createElement("div"));
                        }
                    }

                    async function loop(timestamp) {
                        webcam.update(); // update the webcam frame
                        await predict();
                        window.requestAnimationFrame(loop);
                    }
                    var progress = 327
                    var status = "stand"
                    var count = 0
                    var bent_count = 0
                    async function predict() {

                        // Prediction #1: run input through posenet
                        // estimatePose can take in an image, video or canvas html element
                        const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
                        // Prediction 2: run input through teachable machine classification model
                        const prediction = await model.predict(posenetOutput);
                        if (prediction[1].probability.toFixed(2) >= 1.0) {
                            if (status == "squat") {
                                count++

                                var audio = new Audio(SOUND + 'great.mp3');
                                audio.play();
                                progress = progress-32.7
                                if(progress <= 0) {
                                    progress = 327-32.7
                                }
                                $('.progress').css('stroke-dashoffset', progress);
                                $('#counter').html(count);
                            }
                            status = "stand"
                        } else if (prediction[1].probability.toFixed(2) >= 0.96) {
                            if (status == "squat") {
                                count++

                                var audio = new Audio(SOUND + 'good.mp3');
                                audio.play();
                                progress = progress-32.7
                                if(progress <= 0) {
                                    progress = 327-32.7
                                }
                                $('.progress').css('stroke-dashoffset', progress);
                                $('#counter').html(count);
                            }
                            status = "stand"
                        } else if (prediction[2].probability.toFixed(2) == 1.00) {
                            status = "squat"
                        } else if (prediction[3].probability.toFixed(2) >= 0.85) {
                            if (status == "squat" || status == "stand") {
                                var audio = new Audio(SOUND + 'bent.mp3');
                                audio.play();
                                bent_count++;
                            }
                            $('.progress').css('stroke-dashoffset', progress);
                            $('#counter2').html(bent_count);
                            status = "bent"
                        }

                        // if(count == 10){
                        //     var audio = new Audio(SOUND + 'restart.mp3');
                        //     setTimeout(init, 10000);
                        //     count = 0;
                        //     // location.href="http://naver.com/";
                        // }

                        for (let i = 0; i < maxPredictions; i++) {
                            const classPrediction =
                                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                            labelContainer.childNodes[i].innerHTML = classPrediction;
                        }

                        // finally draw the poses
                        drawPose(pose);
                    }


                    function drawPose(pose) {
                        if (webcam.canvas) {
                            ctx.drawImage(webcam.canvas, 0, 0);
                            // draw the keypoints and skeleton
                            if (pose) {
                                const minPartConfidence = 0.5;
                                tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                                tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                            }
                        }
                    }

                    let today = new Date();

                    let year = today.getFullYear(); // 년도
                    let month = today.getMonth() + 1;  // 월
                    let date = today.getDate();  // 날짜

                    if(date<10) {
                        date='0'+date
                    }

                    if(month<10) {
                        month='0'+month
                    }

                    var day = year + month + date;

                    var firebaseConfig = {
                        apiKey: "AIzaSyB72klvRp9TjHhczFMAMM8FGOhaTLhKHFc",
                        authDomain: "train-5772b.firebaseapp.com",
                        databaseURL: "https://train-5772b.firebaseio.com",
                        projectId: "train-5772b",
                        storageBucket: "train-5772b.appspot.com",
                        messagingSenderId: "874170495915",
                        appId: "1:874170495915:web:92c0dbec429da4161658ee",
                        measurementId: "G-0T8VVPG5BV"
                    };
                    // Initialize Firebase
                    firebase.initializeApp(firebaseConfig);

                    var new_data = {
                        day : count,
                    };

                    var database = firebase.database();
                    var dbTestRef = database.ref('hca/').push().key;

                    var updates = {};
                    updates['/hca/'] = new_data;

                    firebase.database().ref().update(updates);



                </script>

            </td>
            <td>
                <!--                    <div class="col-lg-3 stats">-->
                <h5 style="color:white;">Squat Count</h5>
                <i class="fa fa-check" aria-hidden="true" style="color:white;"></i>
                <div id='counter' style="color:white;">0</div>
<br>
                <h5 style="color:white;">bent Count</h5>
                <i class="fa fa-check" aria-hidden="true" style="color:white;"></i>
                <div id='counter2' style="color:white;">0</div>
            </td>
        </tr>
        </tbody></table>
</main>

<%- include("../part/footer")%>
</div>